// === 化学方程式的正则表达式规则 ===
// 从EBNF定义转换的正则表达式集合

#let patterns = (
  // === 元素规则 ===
  // 匹配元素符号和可选的下标
  // 例如: H, H2, Fe, Fe3+, O2-, Cax
  element: regex("^\s*?([A-Z][a-z]?)\s?(\\d+[a-z]*|[a-z])?"),
  
  // === 系数规则 ===
  // 匹配物质前的数字系数，支持小数点
  // 例如: 2H2O, 3.5(NH4)2SO4
  coefficient: regex("^\\s*(\\d+\\.?\\d*)"),
  
  // === 括号规则 ===
  // 匹配各种类型的括号和可选的下标
  // 例如: (OH), [Fe(CN)6], {CH3CH2}n
  // 匹配各种类型的括号和可选的下标
  // 例如: (OH), [Fe(CN)6], {CH3CH2}n, (OH)3, [Co(NH3)4]^2+
  bracket: regex("^\\s*([\\(\\[\\{\\}\\]\\)])\\s*(\d*|[a-z]+)?"),
  
  // === 电荷规则 ===
  // 匹配离子电荷表示，支持更复杂的电荷格式
  // 例如: H+, Fe3+, SO4^2-, Fe^(3+), Cu^(2+)
  charge: regex("^\\^\\(?([0-9]*(\\+|\\-)+|\\+|\\-[0-9]*)\\)?"),
  
  // === 状态规则 ===
  // 匹配物质状态标记
  // 例如: (s), (l), (g), (aq), (soln)
  state: regex("^\\((s|l|g|aq|soln|solid|liquid|gas|aqueous)\\)"),
  
  // === 箭头规则 ===
  // 匹配各种类型的反应箭头
  // 例如: ->, <->, =, ⇌, ⇒, ⇔
  arrow: regex("^\\s*(<->|<==?>|-->|->|=|⇌|⇒|⇔)"),
  
  // === 加号规则 ===
  // 匹配反应物/产物之间的加号
  plus: regex("^\\s*\\+"),
  
  // === 条件规则集 ===
  // 加热条件
  heating: regex("^\\s*(Δ|δ|Delta|delta|heat|fire|hot|heating)\\s*"),
  
  // 温度条件 - 格式更灵活
  temperature: regex("^\\s*([Tt])\\s*=\\s*(\\d+\\.?\\d*)\\s*([K°C℃F])?"),
  
  // 压力条件 - 支持更多单位
  pressure: regex("^\\s*([Pp])\\s*=\\s*(\\d+\\.?\\d*)\\s*(atm|bar|Pa|kPa|mmHg)?"),
  
  // 催化剂 - 改进匹配
  catalyst: regex("^\\s*(cat|catalyst)\\s*=?\\s*([A-Za-z0-9\\s]+)"),
  
  // 通用参数 - 用于其他类型的条件
  parameter: regex("^\\s*([A-Za-z0-9]+)\\s*=?\\s*([A-Za-z0-9\\s]+)"),
  
  // === 其他辅助规则 ===
  // 逗号分隔符（用于条件列表）
  comma: regex("^\\s*,\\s*"),
  
  // 空白字符
  whitespace: regex("^\\s+"),

  // 数字规则 - 支持小数点
  number: regex("^\\d+\\.?\\d*"),
)

// === 移除非正则表达式相关部分 ===
// 配置和处理逻辑将移至lib.typ
